<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest.errors;

import io.github.jhipster.config.JHipsterConstants;
import io.github.jhipster.web.util.HeaderUtil;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.MessageSource;
<%_ if (databaseType !== 'no' && databaseType !== 'cassandra') { _%>
import org.springframework.dao.ConcurrencyFailureException;
<%_ } _%>
<%_ if (databaseType !== 'no') { _%>
import org.springframework.dao.DataAccessException;
<%_ } _%>
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageConversionException;
<%_ if (reactive && databaseType === 'sql') { _%>
import org.springframework.stereotype.Component;
<%_ } _%>
import org.springframework.validation.BindingResult;
<%_ if (!reactive) { _%>
import org.springframework.web.bind.MethodArgumentNotValidException;
<%_ } _%>
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
<%_ if (reactive) { _%>
import org.springframework.web.bind.support.WebExchangeBindException;
import org.springframework.web.server.ServerWebExchange;
<%_ } _%>
<%_ if (!reactive) { _%>
import org.springframework.web.context.request.NativeWebRequest;
<%_ } _%>
import org.springframework.core.env.Environment;
import org.springframework.web.servlet.LocaleResolver;
import org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver;
import org.zalando.problem.DefaultProblem;
import org.zalando.problem.Problem;
import org.zalando.problem.ProblemBuilder;
import org.zalando.problem.Status;
import org.zalando.problem.StatusType;
import org.zalando.problem.spring.web<% if (reactive) { %>flux<% } %>.advice.ProblemHandling;
import org.zalando.problem.spring.web<% if (reactive) { %>flux<% } %>.advice.security.SecurityAdviceTrait;
import org.zalando.problem.violations.ConstraintViolationProblem;
<%_ if (reactive) { _%>
import reactor.core.publisher.Mono;
<%_ } _%>

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
<%_ if (!reactive) { _%>
import javax.servlet.http.HttpServletRequest;
<%_ } _%>
import java.net.URI;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * Controller advice to translate the server side exceptions to client-friendly json structures.
 * The error response follows RFC7807 - Problem Details for HTTP APIs (https://tools.ietf.org/html/rfc7807).
 */
@ControllerAdvice
<%_ if (databaseType === 'sql' && reactive) { _%>
@Component("jhiExceptionTranslator")
<%_ } _%>
public class ExceptionTranslator implements ProblemHandling, SecurityAdviceTrait {

<%_
let returnType;
let requestClass;
if (reactive) {
    returnType = 'Mono<ResponseEntity<Problem>>';
    requestClass = 'ServerWebExchange';
} else {
    returnType = 'ResponseEntity<Problem>';
    requestClass = 'NativeWebRequest';
}
_%>
    private static final String KEY_CODE = "code";
    private static final String KEY_MESSAGE = "message";
    private static final String KEY_PATH = "path";
    private static final String KEY_VIOLATIONS = "violations";
    private static final String KEY_FIELD_ERRORS = "fieldErrors";
    private static final String KEY_ARGS = "args";

    @Autowired
    private MessageSource messageSource;

    @Autowired
    private LocaleResolver localeResolver;

    @Value("${jhipster.clientApp.name}")
    private String applicationName;

    private final Environment env;

    public ExceptionTranslator(Environment env) {
        this.env = env;
    }

    /**
     * Post-process the Problem payload to add the message key for the front-end if needed.
     */
    @Override
    public <%- returnType %> process(@Nullable ResponseEntity<Problem> entity, <%= requestClass %> nativeWebRequest) {
        if (entity == null) {
            <%_ if (!reactive) { _%>
            return entity;
            <%_ } else { _%>
            return Mono.empty();
            <%_ } _%>
        }
        Problem problem = entity.getBody();
        if (!(problem instanceof ConstraintViolationProblem || problem instanceof DefaultProblem)) {
            <%_ if (!reactive) { _%>
            return entity;
            <%_ } else { _%>
            return Mono.just(entity);
            <%_ } _%>
        }

        Object objCode = problem.getParameters().get(KEY_CODE);
        Object objArgs = problem.getParameters().get(KEY_ARGS);
        String code = objCode == null ? ErrorConstants.ERR_UNKOWN : (String)objCode;
        Object [] args = objArgs == null ? new String []{} : (Object [])objArgs;
        HttpServletRequest request = nativeWebRequest.getNativeRequest(HttpServletRequest.class);
        Locale locale = localeResolver.resolveLocale(request);
        String message = messageSource.getMessage(code, args, locale);
        // 未知类型显示Detail
        if(ErrorConstants.ERR_UNKOWN.equals(code)) {
            message = problem.getDetail();
        }

        ProblemBuilder builder = Problem.builder()
            .withType(Problem.DEFAULT_TYPE.equals(problem.getType()) ? ErrorConstants.URI_DEFAULT : problem.getType())
            .withStatus(problem.getStatus())
            <%_ if (!reactive) { _%>
            .with(KEY_PATH, request.getRequestURI());
            <%_ } else { _%>
            .with(KEY_PATH, request.getRequest().getPath().value());
            <%_ } _%>
            .with(KEY_CODE, code)
            .with(KEY_MESSAGE, message);

        if (problem instanceof ConstraintViolationProblem) {
            builder
                .with(KEY_VIOLATIONS, ((ConstraintViolationProblem) problem).getViolations());
        } else {
//          builder
//              .withCause(((DefaultProblem) problem).getCause())
//              .withDetail(problem.getDetail())
//              .withInstance(problem.getInstance());
//          problem.getParameters().forEach(builder::with);
//          if (!problem.getParameters().containsKey(MESSAGE_KEY) && problem.getStatus() != null) {
//              builder.with(MESSAGE_KEY, "error.http." + problem.getStatus().getStatusCode());
//          }
//      }
        return <% if (reactive) { %>Mono.just(<% } %>new ResponseEntity<>(builder.build(), entity.getHeaders(), entity.getStatusCode())<% if (reactive) { %>)<% } %>;
    }

    @Override
    public <%- returnType %> handle<%_ if (!reactive) { _%>MethodArgumentNotValid(MethodArgumentNotValidException<% } else { %>BindingResult(WebExchangeBindException<% } %> ex, @Nonnull <%= requestClass %> nativeWebRequest) {
        BindingResult result = ex.getBindingResult();
        List<FieldErrorVM> fieldErrors = result.getFieldErrors().stream()
            .map(f -> new FieldErrorVM(f.getObjectName().replaceFirst("<%= dtoSuffix %>$", ""), f.getField(), f.getCode()))
            .collect(Collectors.toList());

        Problem problem = Problem.builder()
            .withType(ErrorConstants.URI_CONSTRAINT_VIOLATION)
            //.withTitle("<%_ if (!reactive) { _%>Method argument not valid<% } else { %>Data binding and validation failure<% } %>")
            .withStatus(<% if (!reactive) { %>defaultConstraintViolationStatus()<% } else { %>Status.BAD_REQUEST<% } %>)
            .with(KEY_CODE, ErrorConstants.ERR_VALIDATION)
            .with(KEY_FIELD_ERRORS, fieldErrors)
            .build();
        return create(ex, problem, nativeWebRequest);
    }

    @ExceptionHandler
    public <%- returnType %> handleBadRequestAlertException(BadRequestAlertException ex, <%= requestClass %> nativeWebRequest) {
        //return create(ex, request, HeaderUtil.createFailureAlert(applicationName, <%= enableTranslation %>, ex.getEntityName(), ex.getErrorKey(), ex.getMessage()));
        Problem problem = Problem.builder()
            .withStatus(Status.BAD_REQUEST)
            .withType(ErrorConstants.URI_DEFAULT)
            .with(KEY_CODE, ex.getErrorKey())
            .build();
        return create(ex, problem, nativeWebRequest);
    }

    <%_ if (databaseType !== 'no' && databaseType !== 'cassandra') { _%>

    @ExceptionHandler
    public <%- returnType %> handleConcurrencyFailure(ConcurrencyFailureException ex, <%= requestClass %> nativeWebRequest) {
        Problem problem = Problem.builder()
            .withStatus(Status.CONFLICT)
            .withType(ErrorConstants.URI_DEFAULT)
            .with(KEY_CODE, ErrorConstants.ERR_CONCURRENCY_FAILURE)
            .build();
        return create(ex, problem, nativeWebRequest);
    }

    /**
     * 业务异常处理
     */
    @ExceptionHandler(BusinessException.class)
    public ResponseEntity<Problem> handleBizErrorAlertException(BusinessException ex, NativeWebRequest nativeWebRequest) {
        Problem problem = Problem.builder()
            .withStatus(Status.BAD_REQUEST)
            .withType(ErrorConstants.URI_DEFAULT)
            .with(KEY_CODE, ex.getCode())
            .with(KEY_ARGS, ex.getArgs())
            .build();
        return create(ex, problem, nativeWebRequest);
    }

    <%_ } _%>

//    @Override
//    public ProblemBuilder prepare(final Throwable throwable, final StatusType status, final URI type) {
//        return Problem.builder()
//            .withType(type)
//            .withTitle(status.getReasonPhrase())
//            .withStatus(status)
//            .withDetail(throwable.getMessage())
//            .withCause(Optional.ofNullable(throwable.getCause())
//                .filter(cause -> isCausalChainsEnabled())
//                .map(this::toProblem)
//      .orElse(null));
//    }
}
